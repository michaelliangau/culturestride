<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.9/flatpickr.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.9/flatpickr.min.js"></script>

<div class="row">

    <div class="col-sm-12">

        <form name="/sohostartclass" method="post" id="" style="text-align: left">
            <input type="hidden" name='sohoUID' value='<%- sohoLoggedIn %>'>

            <span class="badge badge-primary badge-pill">Record classes only after they have already taken place</span>

            <div class="form-group">
                <label for="classType"><b>Class Type</b></label>
                <select id="classType" name="classType" class="selectpicker form-control" onchange="loadMultiselect();"
                    required>

                    <option value="typea">Theory (Private 1-on-1 class)</option>
                    <option value="typeb">Practical (Group conversation class)</option>

                </select>

            </div>


            <div class="form-group" id="classTypeAGroup">
                <label for="classTypeA"><b>Student</b></label>
                <span id="classDetails" class="badge badge-pill badge-light"></span>



                <select id="classTypeA" name="classTypeA" class="selectpicker form-control" data-live-search="true" data-size="10"
                    onchange="loadHSKUnitLevel();updateClassDetails();" required>

                    <option value="">Please select...</option>
                    <% for (var i = 0 ; i < (student.length) ; i ++) { %>
                    <option value="<%- student[i].sohoCID %>" data-rwlevel="<%- student[i].readWriteHSKLevel %>"
                        data-lslevel="<%- student[i].listenSpeakHSKLevel %>"
                        data-classType="<%- student[i].classType %>" data-lessonCount="<%- student[i].lessonCount %>">
                        <%- student[i].className %>
                    </option>
                    <% } %>

                </select>

            </div>

            
            <div class="form-group" id="classTypeBGroup" style="display:none;">
                <label for="classTypeB"><b>Select all students in the class</b></label>
                <span id="classDetails" class="badge badge-pill badge-light"></span>



                <select id="classTypeB" name="classTypeB" class="selectpicker form-control" data-live-search="true" data-size="10"
                    onchange="" multiple>

                    <option value="">Please select...</option>
                    <% for (var i = 0 ; i < (allStudent.length) ; i ++) { %>
                    <option value="<%- allStudent[i].sohoCID %>" data-rwlevel="<%- allStudent[i].readWriteHSKLevel %>"
                        data-lslevel="<%- allStudent[i].listenSpeakHSKLevel %>"
                        data-classType="<%- allStudent[i].classType %>" data-lessonCount="<%- allStudent[i].lessonCount %>">
                        <%- allStudent[i].className %>
                    </option>
                    <% } %>

                </select>

            </div>


            <div class="form-group" id="hoursTypeAGroup">
                <label for="hoursUsed"><b>Class length (hours)</b></label>
                <span class="subtext">Record Free student 45 Minute Classes as "0.75"</span>
                <input class="form-control" type="number" step="0.25" value="1" name="hoursUsed" id="hoursUsed" min="0"
                    required>
                <div class="invalid-feedback">
                    Please add hours used.
                </div>
            </div>
            <div class="form-group" id="levelTypeAGroup">
                <label for="hskLevel"><b>Student level</b></label>
                <span class="subtext">(This determines the automated homework the student will
                    receive every day. Put HSK
                    = 1 Unit = 0 if HSK does not apply)</span>
                <br>
                <span class="badge badge-pill badge-light subtext" style="font-weight: normal;">Current
                    Listening/Speaking Level: HSK <span id="curLSHSKLevel"></span><span
                        id="nextLSHSKLevel"></span></span>
                <br>
                <span class="badge badge-pill badge-light subtext" style="font-weight: normal;">Current Reading/Writing
                    Level: HSK <span id="curRWHSKLevel"></span><span id="nextRWHSKLevel"></span></span>
                <div style="margin:10px 0px">
                    Listening/Speaking HSK
                    <input class="form-control" style="display:inline-block; width:inherit" type="number"
                        id="LSHSKLevel" name="LSHSKLevel" min="1" max="6" required>
                    Unit
                    <input class="form-control" style="display:inline-block; width:inherit" type="number" id="LSHSKUnit"
                        name="LSHSKUnit" min="1" max="40" required>
                </div>
                <div style="margin:10px 0px">

                    Reading/Writing HSK
                    <input class="form-control" style="display:inline-block; width:inherit" type="number"
                        id="RWHSKLevel" name="RWHSKLevel" min="1" max="6" required>
                    Unit
                    <input class="form-control" style="display:inline-block; width:inherit" type="number" id="RWHSKUnit"
                        name="RWHSKUnit" min="1" max="40" required>
                </div>

            </div>

            <div class="form-group">
                <label for="classDate" id="classDateLabel"><b>Start time of class
                        (<%- Intl.DateTimeFormat().resolvedOptions().timeZone %> time)</b></label>
                <br>
                <input name="classDate" id="classDate" type="text" autocomplete="off" required>
            </div>


            <div class="form-group" id="syllabusTypeAGroup">
                <label for="syllabus"><b>Share syllabus slides to student (optional)</b></label>
                <span id="classDetails" class="badge badge-pill badge-light"></span>



                <select id="syllabus" name="syllabus" class="selectpicker form-control" data-live-search="true"
                    onchange="loadSyllabusPreview()" data-size="20">

                    <option value="">Please select...</option>
                    <% for (var i = 0 ; i < (syllabus.length) ; i ++) { %>
                    <option value="<%- syllabus[i].sohoYID %>">
                        <%- syllabus[i].title %>
                    </option>
                    <% } %>

                </select>
                <br>
                <div id="syllabusPreview" style="overflow:scroll;max-height:20vh;"></div>

            </div>


            <% if (error == 1) { %>
            <p style="color:red;">
                Invalid date, please record class again with a date/time in the current payment cycle, after
            </p>
            <p style="color: red" id="paymentCycle">
                <% function getPaymentCycle() {
                        var start = moment.utc().startOf('month'); 
                        var startObject = new Date(start);
                        return startObject;
                    } %>
                <%- getPaymentCycle() %>
            </p>
            <% } %>

            <button formaction="/sohostartclass?start=0" class="button button-secondary button-block button-shadow"
                style="margin: 10px 0px; display: inline-block" type="submit">Save Class Record</button>

        </form>

        <br>
    </div>

</div>

<script>
    function loadMultiselect() {
        if (document.getElementById('classType').value == 'typeb') {
            document.getElementById('classTypeAGroup').style.display = "none";
            document.getElementById('hoursTypeAGroup').style.display = "none";
            document.getElementById('levelTypeAGroup').style.display = "none";
            document.getElementById('syllabusTypeAGroup').style.display = "none";
            document.getElementById('classTypeBGroup').style.display = "block";

            // required
            document.getElementById("classTypeA").required = false;
            document.getElementById("classTypeB").required = true;
            document.getElementById("hoursUsed").required = false;
            document.getElementById("LSHSKLevel").required = false;
            document.getElementById("LSHSKUnit").required = false;
            document.getElementById("RWHSKLevel").required = false;
            document.getElementById("RWHSKUnit").required = false;


        } else { // remove it
            document.getElementById('classTypeAGroup').style.display = "block";
            document.getElementById('hoursTypeAGroup').style.display = "block";
            document.getElementById('levelTypeAGroup').style.display = "block";
            document.getElementById('syllabusTypeAGroup').style.display = "block";
            document.getElementById('classTypeBGroup').style.display = "none";

                        // required
                        document.getElementById("classTypeB").required = false;
            document.getElementById("classTypeA").required = true;
            
        }
    }

    function loadSyllabusPreview() {
        var id = document.getElementById('syllabus').value;
        ajaxGetSyllabusPreview(id);
    }

    function ajaxGetSyllabusPreview(id) {
        $.ajax({
            type: "POST",
            url: "/ajaxGetSyllabusPreview",
            timeout: 30000,
            data: {
                id: id,
            },
            success: function (data) {
                //show content
                console.log('successful post');
                console.log("file: sohoStartClass.ejs ~ line 140 ~ ajaxGetSyllabusPreview ~ data", data)
                document.getElementById('syllabusPreview').innerHTML = '';
                document.getElementById('syllabusPreview').innerHTML = data.syllabus[0].content;
            },
            error: function (jqXHR, textStatus, err) {
                //show error message
                console.log('unsuccessful post');
            }
        });
    }

    function loadHSKUnitLevel() {
        var selectedClass = document.getElementById("classTypeA").value;

        var e = document.getElementById("classTypeA");
        var option = e.options[e.selectedIndex];
        // get levels
        var readWriteHSKLevel = option.getAttribute("data-rwlevel");
        var listenSpeakHSKLevel = option.getAttribute("data-lslevel");
        var readWriteHSKLevelArr = readWriteHSKLevel.split('.');
        var listenSpeakHSKLevelArr = listenSpeakHSKLevel.split('.');

        // change hsk input values to current student level
        document.getElementById("curLSHSKLevel").textContent = listenSpeakHSKLevel;
        document.getElementById("curRWHSKLevel").textContent = readWriteHSKLevel;

        var nextReadWriteLevel = incrementLevel(readWriteHSKLevelArr, readWriteHSKLevel)
        var nextListenSpeakLevel = incrementLevel(listenSpeakHSKLevelArr, listenSpeakHSKLevel)

        document.getElementById("nextRWHSKLevel").textContent = ' (Next: ' + nextReadWriteLevel + ')';
        document.getElementById("nextLSHSKLevel").textContent = ' (Next: ' + nextListenSpeakLevel + ')';


    }

    // increment next level
    function incrementLevel(curLevelArr, curLevel) {
        var nextLevel;
        if (curLevel != "1.15" && curLevel != "2.15" && curLevel != "3.20" &&
            curLevel != "4.20" && curLevel != "5.36") {
            nextLevel = curLevelArr[0] + '.' + (parseInt(curLevelArr[1]) + 1);
        } else if (curLevel == "1.15") {
            nextLevel = "2.0";
        } else if (curLevel == "2.15") {
            nextLevel = "3.0";
        } else if (curLevel == "3.20") {
            nextLevel = "4.0";
        } else if (curLevel == "4.20") {
            nextLevel = "5.0";
        } else if (curLevel == "5.36") {
            nextLevel = "6.0";
        }
        return (nextLevel);
    }

    function updateClassDetails() {
        var e = document.getElementById("classTypeA");
        var option = e.options[e.selectedIndex];
        var selectedClassType = option.getAttribute("data-classType");
        var selectedLessonCount = option.getAttribute("data-lessonCount");
        if (selectedClassType == 'free') {
            if (selectedLessonCount >= 2) {
                document.getElementById("classDetails").innerHTML = '(Class details: ' + selectedClassType +
                    ' - <span style="color:red">' + selectedLessonCount +
                    ' / 2 Lessons</span>. This student should not receive any more free classes until they\'ve added in their credit card details at https://culturestride.com/a/classadmin)';
            } else {
                document.getElementById("classDetails").textContent = '(Class details: ' + selectedClassType + ' - ' +
                    selectedLessonCount + ' / 2 Lessons)';
            }
        } else {
            document.getElementById("classDetails").textContent = '(Class details: ' + selectedClassType + ' - ' +
                selectedLessonCount + ' Lessons)';
        }

    }






    $(document).ready(function () {
        // var dateObject = new Date();
        // var month = dateObject.getMonth() + 1; 
        // var year = dateObject.getFullYear();
        // if (month == 0) {
        //     month = 12;
        //     year = year - 1;
        // }

        // var formatMonth = ("0" + (month)).slice(-2);
        // var formatDate = year + '-' + formatMonth;
        // console.log("🚀 ~ file: sohoStartClass.ejs ~ line 169 ~ formatDate", formatDate);


        var optional_config = {
            allowInput: true,
            enableTime: true,
            altInput: true,
            altFormat: "Y-m-d H:i:00",
            dateFormat: 'Z',
            time_24hr: true,
            // minDate: formatDate,
            onChange: function (dateObj, dateStr) {
                dateObj = dateObj[0];
                const utc = moment(dateObj).utc();
                console.log(utc.format());
                //test.selectedDateObj = utc.toDate();
                //test.input.value = utc.format();
                //timezone.textContent = utc.utcOffset();
            }
        }
        $("#classDate").flatpickr(optional_config);
    });

    // prevent double submit of form
    $('form').submit(function () {
        $('button[type=submit]', this).attr('disabled', 'disabled');
    });
</script>