<!-- Homework save TOAST -->
<div id="saveToast" class="toast mobileHide" data-delay="3000" role="alert" aria-live="assertive" aria-atomic="true"
  style="position: fixed;bottom: 0;left: 0;z-index:20;">
  <div class="toast-header">
    <strong class="mr-auto">Notification</strong>
    <span class="badge badge-pill badge-primary">now</span>

    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="toast-body">
    Syllabus and notes saved successfully</span>
  </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <form method="post" id="editForm" validate>
            <input type="hidden" name='id' id='id' value='<%- id %>'>

            <button type="submit" class="button button-secondary button-block button-shadow" style="margin: 10px 0px;display:inline-block"
            formaction="/sohosyllabuspagecreate" data-toggle="tooltip" title="Add New Page">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square"
              viewBox="0 0 16 16">
              <path
                d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
              <path
                d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
            </svg>
          </button>

            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" class="form-control" name="title" id="title" value="<%- syllabus[0].title %>" required>
                <div class="invalid-feedback">
                    Please input a valid title.
                </div>
            </div>

            <div style="display:flex; flex-direction: column;">
                <form method="post">

            <% for (var i = 0; i < syllabus.length; i ++) { %>
                      <button class="button button-secondary button-block button-shadow button-icon" type="button" onclick="save('<%- syllabus[i].sohoYPID %>')"
                        data-toggle="tooltip" title="Save page <%- i + 1 %> content and notes"
                        style="margin: 10px 0px 10px auto; float: right;"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save" viewBox="0 0 16 16">
                          <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"/>
                        </svg></button>
            
                        <span>Page <%- i + 1 %> content</span>
        
                <textarea id="tinyTextEditor<%- syllabus[i].sohoYPID %>" name="tinyTextEditor" required>
                    <%- syllabus[i].content %>
                </textarea>
                <span>Page <%- i + 1 %> notes</span>
                <textarea id="tinyTextEditorNotes<%- syllabus[i].sohoYPID %>" name="tinyTextEditor" required>
                    <%- syllabus[i].notes %>
                </textarea>
        

            <% } %>
        </form>

        </div>

        

        </form>
    </div>

</div>


<!-- Required to start the TINYMCE editor + initiate real time collaboration -->
<script>
    tinymce.init({
        setup: function (ed) {
            ed.on('keyup', function (e) {
                if (event.key == 1 || event.key == 2 || event.key == 3 || event.key ==
                    4) { // the update function only runs if 1-4 is inputted
                    // console.log('Editor contents was modified. Contents: ' + ed.getContent());
                    var bm = ed.selection.getBookmark(2,
                        false
                    ); // define caret location (tinymce bookmarks) - idk what 2, false does but it works
                    // run replace function on content
                    var content = ed.getContent({
                        format: 'html'
                    });

                    var newContent = pinyinTonify(content);

                    // set content
                    ed.setContent(newContent, {
                        format: 'html'
                    });
                    ed.selection.moveToBookmark(bm); // move caret to bookmark
                }

            });

        },
        selector: 'textarea',
        min_height: 200,
        height: '40vh',
        content_style: "body {font-size: 12pt;}",
        fontsize_formats: "8pt 9pt 10pt 11pt 12pt 14pt 16pt 18pt 20pt 24pt 28pt 32pt",
        menubar: false,
        forced_root_block: false,
        image_description: false,
        image_dimensions: false,
        automatic_uploads: true,
        /*
          URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)
          images_upload_url: 'postAcceptor.php',
          here we add custom filepicker only to Image dialog
        */
        file_picker_types: 'image',
        /* and here's our custom image picker*/
        file_picker_callback: function (cb, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');

            /*
              Note: In modern browsers input[type="file"] is functional without
              even adding it to the DOM, but that might not be the case in some older
              or quirky browsers like IE, so you might want to add it to the DOM
              just in case, and visually hide it. And do not forget do remove it
              once you do not need it anymore.
            */

            input.onchange = function () {
                var file = this.files[0];

                var reader = new FileReader();
                reader.onload = function () {
                    /*
                      Note: Now we need to register the blob in TinyMCEs image blob
                      registry. In the next release this part hopefully won't be
                      necessary, as we are looking to handle it internally.
                    */
                    var id = 'blobid' + (new Date()).getTime();
                    var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                    var base64 = reader.result.split(',')[1];
                    var blobInfo = blobCache.create(id, file, base64);
                    blobCache.add(blobInfo);

                    /* call the callback and populate the Title field with the file name */
                    cb(blobInfo.blobUri(), {
                        title: file.name
                    });
                };
                reader.readAsDataURL(file);
            };

            input.click();
        },
        fullscreen_native: true,
        plugins: "lists autosave table image",
        pagebreak_separator: '<hr>',
        toolbar: [{
                name: 'color',
                items: ['forecolor', 'backcolor']
            },
            {
                name: 'fontsize',
                items: ['fontsizeselect']
            },
            {
                name: 'formatting',
                items: ['bold', 'italic', 'underline', 'strikethrough', 'numlist', 'bullist']
            },
            {
                name: 'alignment',
                items: ['alignleft', 'aligncenter', 'alignright']
            },
            {
                name: 'table',
                items: ['table', 'image']
            },
        ],
    });

    // turn text into pinyin - if you edit this function, edit this in all files across the app...
    function pinyinTonify(word) {
        for (var i = 0; i < tonesArr.length; i++) {
            var regEx = new RegExp("(" + tonesArr[i].str + ")(?!([^<]+)?>)",
                "gi"); // only replace outside of html tags
            word = word.replace(regEx, tonesArr[i].toneStr);
        }
        return (word);
    }

    // PREPARE FOR PINYIN TONIFY
    var tonesArr = [];
    // create pairs
    createPairs('a1', 'ā');
    createPairs('a2', 'á');
    createPairs('a3', 'ǎ');
    createPairs('a4', 'à');
    createPairs('e1', 'ē');
    createPairs('e2', 'é');
    createPairs('e3', 'ě');
    createPairs('e4', 'è');
    createPairs('i1', 'ī');
    createPairs('i2', 'í');
    createPairs('i3', 'ǐ');
    createPairs('i4', 'ì');
    createPairs('o1', 'ō');
    createPairs('o2', 'ó');
    createPairs('o3', 'ǒ');
    createPairs('o4', 'ò');
    createPairs('u1', 'ū');
    createPairs('u2', 'ú');
    createPairs('u3', 'ǔ');
    createPairs('u4', 'ù');
    createPairs('ü1', 'ǖ');
    createPairs('ü2', 'ǘ');
    createPairs('ü3', 'ǚ');
    createPairs('ü4', 'ǜ');
    createPairs('an1', 'ān');
    createPairs('an2', 'án');
    createPairs('an3', 'ǎn');
    createPairs('an4', 'àn');
    createPairs('ang1', 'āng');
    createPairs('ang2', 'áng');
    createPairs('ang3', 'ǎng');
    createPairs('ang4', 'àng');
    createPairs('en1', 'ēn');
    createPairs('en2', 'én');
    createPairs('en3', 'ěn');
    createPairs('en4', 'èn');
    createPairs('eng1', 'ēng');
    createPairs('eng2', 'éng');
    createPairs('eng3', 'ěng');
    createPairs('eng4', 'èng');
    createPairs('in1', 'īn');
    createPairs('in2', 'ín');
    createPairs('in3', 'ǐn');
    createPairs('in4', 'ìn');
    createPairs('ong1', 'ōng');
    createPairs('ong2', 'óng');
    createPairs('ong3', 'ǒng');
    createPairs('ong4', 'òng');
    createPairs('ing1', 'īng');
    createPairs('ing2', 'íng');
    createPairs('ing3', 'ǐng');
    createPairs('ing4', 'ìng');
    createPairs('un1', 'ūn');
    createPairs('un2', 'ún');
    createPairs('un3', 'ǔn');
    createPairs('un4', 'ùn');
    createPairs('er2', 'ér');
    createPairs('er3', 'ěr');
    createPairs('er4', 'èr');
    createPairs('aō', 'āo');
    createPairs('aó', 'áo');
    createPairs('aǒ', 'ǎo');
    createPairs('aò', 'ào');
    createPairs('oū', 'ōu');
    createPairs('oú', 'óu');
    createPairs('oǔ', 'ǒu');
    createPairs('où', 'òu');
    createPairs('aī', 'āi');
    createPairs('aí', 'ái');
    createPairs('aǐ', 'ǎi');
    createPairs('aì', 'ài');
    createPairs('eī', 'ēi');
    createPairs('eí', 'éi');
    createPairs('eǐ', 'ěi');
    createPairs('eī', 'èi');


    function createPairs(str, toneStr) {
        var pairs = {
            str: str,
            toneStr: toneStr,
        }
        tonesArr.push(pairs);
    }

    // tooltips bootstrap
    $(function () {
        $('[data-toggle="tooltip"]').tooltip({
        boundary: 'window'
        })
    });

    
    // SAVE
    function save(sohoYPID) {
    var text = tinymce.get("tinyTextEditor" + sohoYPID).getContent({format: 'html'});
    var notes = tinymce.get("tinyTextEditorNotes" + sohoYPID).getContent({format: 'html'});
    var title = document.getElementById("title").value;
    ajaxSaveSyllabusPage(text, notes, sohoYPID, title)
  }

  // ajax save
  function ajaxSaveSyllabusPage(text, notes, sohoYPID, title) {
    $.ajax({
      type: "POST",
      url: "/ajaxSaveSyllabusPage",
      timeout: 30000,
      data: {
        text: text,
        notes: notes,
        sohoYPID: sohoYPID,
        title: title,
      },
      success: function (data) {
        console.log('successful post');
        $('#saveToast').toast('show'); // toast notification
      },
      error: function (jqXHR, textStatus, err) {
        //show error message
        console.log('unsuccessful post');
      }
    });
  }
</script>