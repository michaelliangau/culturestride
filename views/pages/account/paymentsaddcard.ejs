<script src="https://js.stripe.com/v3/"></script>

<div class="row">
  <div class="col-xl-6">
    <div class="feature text-center is-revealing box-shadow" style="max-width: none;width: 100%;position:inherit">
      <div style="padding:40px 40px;text-align:left">
        <span class="subtext">
        Plan selected:
        <% if (plan == 1) { %>
          Practical Group Class Only
        <% } else if (plan == 2) { %>
        Theory and Practical Class Together

        <% } else if (plan == 3) { %>
          Theory Class Only
        <% } else { %>
          No plan selected, select one <a href="/a/payments">here</a>.
        <% } %>
      </span>
        <select style="margin-top:20px" id="cardCur" name="cardCur" class="custom-select" onchange="updateSPI();">
          <option data-theory-value="<%- stripeTheoryPriceIdAUD %>" data-practical-value="<%- stripePracticalPriceIdAUD %>" data-cur="AUD" selected>Charge me in AUD (Australian Dollar)</option>
          <option data-theory-value="<%- stripeTheoryPriceIdUSD %>" data-practical-value="<%- stripePracticalPriceIdUSD %>" data-cur="USD">Charge me in USD (US Dollar)</option>
        </select>

        <form id="subscription-form" style="margin: 30px 0px 0px 0px">
          <div id="card-element" class="MyCardElement" style="margin-bottom:30px;">
            <!-- Elements will create input elements here -->
          </div>

          <!-- We'll put the error messages in this element -->
          <div id="card-errors" role="alert"></div>

          <button id="addCardBtn" onclick="addCard()" class="button button-secondary button-block button-shadow" type="submit"  style="margin: 10px 0px 0px 0px;display: none;">Submit Card</button>
            <button id="loadingCardBtn" class="button button-secondary button-block button-shadow" type="button"
             style="margin: 10px 0px 0px 0px;display:none;">Submitting...</button>
          <div id="sci" style="display:none"><%- stripeCustomerId %></div>
          <div id="theoryspi" style="display:none"><%- stripeTheoryPriceIdAUD %></div>
          <div id="practicalspi" style="display:none"><%- stripePracticalPriceIdAUD %></div>

        </form>

      </div>
    </div>
  </div>

</div>
<div id="classType" style="display:none"><%- sClassType %></div>
<div id="plan" style="display:none"><%- plan %></div>






<script>
  // STRIPE LIVE PK
  var stripe = Stripe(
    'pk_live_51Hc3IkBHXwfbDpFltGO5koGeAg27QlKkWw6Cea2YSbiJedjlwXhUnkRyS1Z8su7AXfuZjNKpNhndjTRXxVUXOzUO00AbmrrtkZ'
  );

  // STRIPE TEST PK
  // var stripe = Stripe(
  //   'pk_test_51Hc3IkBHXwfbDpFleiAVbxvB7jRtvd33ldvDlCoy2fxoPLKHSh38Py5YBsN1ZrIza3CHtaC1eeIbRbSwJqLbLqDf00ixtUsPwb'
  // );

  var elements = stripe.elements();

  // Set up Stripe.js and Elements to use in checkout form
  var style = {
    base: {
      color: "#32325d",
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: "antialiased",
      fontSize: "16px",
      "::placeholder": {
        color: "#aab7c4"
      }
    },
    invalid: {
      color: "#fa755a",
      iconColor: "#fa755a"
    }
  };

  var cardElement = elements.create("card", {
    hidePostalCode: true,
    style: style
  });
  cardElement.mount("#card-element");

  // invalid user inputs in CC
  cardElement.on('change', showCardError);

  function showCardError(event) {
    let displayError = document.getElementById('card-errors');
    document.getElementById("loadingCardBtn").style.display = "none";
    document.getElementById("addCardBtn").style.display = "block";
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  }


  // addCard(); // add event
  function addCard() {

    var sci = document.getElementById("sci").innerHTML;
    var theorySPI = document.getElementById("theoryspi").innerHTML;
    var practicalSPI = document.getElementById("practicalspi").innerHTML;
    var plan = document.getElementById('plan').textContent;

    var submitEventListener = function (e) {
      document.getElementById('addCardBtn').style.display = 'none';
      document.getElementById('loadingCardBtn').style.display = 'block'; // we do this to prevent double submitting
      e.preventDefault();
      createPaymentMethod(cardElement, sci, theorySPI, practicalSPI, plan);
    };
    document.addEventListener('submit', submitEventListener, {once: true});

  }


  function createPaymentMethod(cardElement, customerId, theorySPI, practicalSPI, plan) {
    return stripe
      .createPaymentMethod({
        type: 'card',
        card: cardElement,
      })
      .then((result) => {
        if (result.error) {
          displayError(error);
        } else {
          createSubscription(
            customerId,
            result.paymentMethod.id,
            theorySPI,
            practicalSPI,
            plan
          );
        }
      });
  }


  function createSubscription(customerId, paymentMethodId, theorySPI, practicalSPI, plan) {
    return (
      fetch('/create-subscription', {
        method: 'post',
        headers: {
          'Content-type': 'application/json',
        },
        body: JSON.stringify({
          customerId: customerId,
          paymentMethodId: paymentMethodId,
          theorySPI: theorySPI,
          practicalSPI: practicalSPI,
          plan: plan,
        }),
      })
      .then((response) => {
        return response.json();
      })
      // If the card is declined, display an error to the user.
      .then((result) => {
        if (result.error) {
          // The card had an error when trying to attach it to a customer.
          throw result;
        }
        return result;
      })
      // Normalize the result to contain the object returned by Stripe.
      // Add the additional details we need.
      .then((result) => {
        return {
          paymentMethodId: paymentMethodId,
          theorySPI: theorySPI,
          practicalSPI: practicalSPI,
          subscription: result,
        };
      })
      // Some payment methods require a customer to be on session
      // to complete the payment process. Check the status of the
      // payment intent to handle these actions.
      // .then(handlePaymentThatRequiresCustomerAction)
      // No more actions required. Provision your service for the user.
      .then(onSubscriptionComplete)
      .catch((error) => {
        // An error has happened. Display the failure to the user here.
        // We utilize the HTML element we created.
        showCardError(error);
      })
    );


    function onSubscriptionComplete(result) {
      // Payment was successful.
      if (result.subscription.status === 'active') {

        // is this account a free account?
        if (document.getElementById("classType").innerHTML == 'free') { // free account
          // ajax call to do server stuff

          // redirect
          window.location.href = '/a/payments';


        } else { // standard account
          console.log('standard');

          window.location.href = '/a/payments';
        }



      }
    }
  }

  function updateSPI() {
    var selectedTheorySPI = document.getElementById("cardCur").querySelector(':checked').getAttribute('data-theory-value');
    console.log("file: paymentsaddcard.ejs ~ line 223 ~ updateSPI ~ selectedTheorySPI", selectedTheorySPI)
    var selectedPracticalSPI = document.getElementById("cardCur").querySelector(':checked').getAttribute('data-practical-value');
    console.log("file: paymentsaddcard.ejs ~ line 225 ~ updateSPI ~ selectedPracticalSPI", selectedPracticalSPI)

    document.getElementById("theoryspi").textContent = selectedTheorySPI;
    document.getElementById("practicalspi").textContent = selectedPracticalSPI;
  }

  
</script>